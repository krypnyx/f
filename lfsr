Pseudocode –
Input - binary plaintext
Assumption -
=> m = 4
=> constants = (1,1,0,0)
=> binary m-tuple = (0,0,1,0)
Z := Keystream of length equal to the input binary string
Z(i) = binary_m_tuple[i] , (0 < i < m)
Z(i+m) = Summation from (j=0 to m-1) of [ C(j).Z(i+j) % 2 ]
Encrypted Text = Z (XOR) plaintext
Decrypted Text = Encrypted Text (XOR) Z
Output - Z (Keystream)
Encrypted Text
Decrypted Text
Code –
#include <bits/stdc++.h>
using namespace std;
int main()
{
// Suppose m = 4
string binary_m_tuple = "0010";
vector<int> constants = {1, 1, 0, 0};
// Keystream will be generated by - Z(i+m) = Summation from (j=0 to m-1) 
of [ C(j).Z(i+j) % 2 ]
cout << "Enter a binary plaintext : ";
string in;
cin >> in;
int l = in.length();
vector<int> plaintext(l);
for (int i = 0; i < l; i++)
{
if (in[i] == '1')
plaintext[i] = 1;
else
plaintext[i] = 0; }
vector<int> z(l, 0);
int m = binary_m_tuple.size();
for (int i = 0; i < min(l, m); i++)
{
if (binary_m_tuple[i] == '1') z[i] = 1;
else
z[i] = 0; }
for (int i = m; i < l; i++)
{
int j = 0;
for (int k = i - m; k < i; k++)
{ z[i] += (z[k] * constants[j++]) % 2; z[i] %= 2; } }
cout << "\nKeystram Generated : [";
for (int i = 0; i < l; i++)
{
if (i != l - 1) {
cout << z[i] << ", "; }
else
{
cout << z[i]; } }
cout << "]\n";
// Encryption
cout << "\nEncrypted String : ";
string ans;
vector<int> c(l);
for (int i = 0; i < l; i++)
{
int xorof_m_k = (plaintext[i] ^ z[i]);
c[i] = xorof_m_k;
if (xorof_m_k == 1)
ans.push_back('1');
else
ans.push_back('0');
}
cout << ans << endl;
// Decryption
string res;
for (int i = 0; i < l; i++)
{
int xorof_c_k = (c[i] ^ z[i]);
if (xorof_c_k == 1)
res.push_back('1');
else
res.push_back('0');
}
cout << "\nDecrypted String : " << res << endl;
return 0; }